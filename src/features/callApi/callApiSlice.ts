import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";

import type { AppState, AppThunk } from "../../store";
import { fetchApi } from "./apiCaller";

export interface ApiState {
  helloTo: string | undefined;
}

const initialState: ApiState = {
  helloTo: undefined,
};

export const callApiAsync = createAsyncThunk("api/callApi", async () => {
  const response = await fetchApi();
  // The value we return becomes the `fulfilled` action payload
  return response.helloTo;
});

export const apiSlice = createSlice({
  name: "api",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(callApiAsync.fulfilled, (state, action) => {
      state.helloTo = action.payload;
    });
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectApiState = (state: AppState) => state.api.helloTo;

export default apiSlice.reducer;
